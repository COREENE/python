#python 学习笔记4之正则表达式


#正则表达式
'\d' 一个数字
'\w' 一个字母或数字
'.' 任意字符
'*' 任意个字符（包括0个）
'+' 至少一个字符
'{n}' n个字符
'{n,m}' n-m个字符
'\s' 一个空格（也包括Tab等空白符）
#特殊字符在正则表达式中，要用'\'转义
'[0-9a-zA-Z\_]'一个数字、字母或者下划线；
'[0-9a-zA-Z\_]+'至少由一个数字、字母或下划线组成的字符串
'[a-zA-Z\_][0-9a-zA-Z\_]*'由字母或下划线开头，后接任意个
由一个数字、字母或者下划线组成的字符串
'[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}'变量的长度是1-20个字符
'A|B'A或B
'^'表示行的开头,'^\d'表示必须以数字开头
'$'表示行的结束，'\d$'表示必须以数字结束
#py也可以匹配'python'，加上^py$就变成了整行匹配，就只能匹配'py'

>>> import re  #re模块，包含所有正则表达式的功能
>>> re.match(r'^\d{3}\-\d{3,8}$', '010-12345')
<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
>>> re.match(r'^\d{3}\-\d{3,8}$', '010 12345')
>>>
#match()方法判断是否匹配
test = '用户输入的字符串'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')

#切分字符串
>>> re.split(r'[\s\,\;]+', 'a,b;; c  d')
['a', 'b', 'c', 'd']

#分组
>>> m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
>>> m
<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
>>> m.group(0)
'010-12345'
>>> m.group(1)
'010'
>>> m.group(2)
'12345'

#贪婪匹配  匹配尽可能多的字符
>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')
>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00') #非贪婪匹配

#编译
>>> import re
# 编译:
>>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
>>> re_telephone.match('010-12345').groups()
('010', '12345')
>>> re_telephone.match('010-8086').groups()
('010', '8086')










